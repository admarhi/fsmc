usethis::use_package("stats")
usethis::use_mit_license()
devtools::load_all(".")
usethis::use_build_ignore("dev*")
usethis::use_build_ignore("dev/")
usethis::use_build_ignore("dev_data/")
## Make different microbial communities
dat1 <- rand_mo_data(n_mo = 10, max_met = 3, seed = 4)
dat2 <- rand_mo_data(n_mo = 20, max_met = 4, seed = 9)
dat3 <- rand_mo_data(n_mo = 5, max_met = 4, n_co = 2, seed = 4)
dat4 <- rand_mo_data(n_mo = 10, max_met = 10, scale_fac = 1, seed = 4)
dat5 <- rand_mo_data(n_mo = 5, max_met = 20, n_co = 2, seed = 4)
dat6 <- rand_mo_data(n_mo = 10, max_met = 4, scale_fac = 1.2, seed = 4)
#links1 <- get_links(dat1)
get_links(dat2)
# Test different MC
x <- MiCo.align(dat1); x
x <- MiCo.align(dat2); x
x <- MiCo.align(dat3); x
x <- MiCo.align(dat4); x
x <- MiCo.align(dat5); x
x <- MiCo.align(dat6); x
##### Example with old dat1
load("dev_data/dat1.rda"); dat_first <- dat1
MiCo.align(dat_first)
x <- MiCo.align(dat_first)
x[c("edges_n", "bin_mat", "js_mat")]
x[c("flux_prod_j",
"flux_prod_j_abs_diff", "flux_prod_j_rel_diff",
"flux_cons_i",
"flux_cons_i_abs_diff", "flux_cons_i_rel_diff")]
##### mar15
load("dev_data/mar15.rda")
x <- MiCo.align(mar15)
x$edges
x[c("bin_mat", "js_mat")]
x[c("flux_prod_j", "flux_cons_i")]
# Initialise list
msR <- list()
# Read all solutions and save to list
for (f in list.files("dev/dev_data/misosoupr_data", full.names = TRUE)) {
tb <- read.csv(file = f) %>%
tibble::as_tibble() %>%
dplyr::rename(
MO = "nodeB",
met = "nodeA",
val = "weight"
) %>%
dplyr::select(dplyr::all_of(c("MO", "met", "val")))
# Extract solution name
name <- stringr::str_split(f, "/")[[1]][3] %>% stringr::str_remove(".csv")
# Assign solution to list
msR[[name]] <- tb
}
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
use_vignette("Functional Similarity")
use_vignette(name = "func_sim",title = "Functional Similarity")
library(mcfusi)
# Initialise list
msR <- list()
# Read all solutions and save to list
for (f in list.files("dev/dev_data/misosoupr_data", full.names = TRUE)) {
tb <- read.csv(file = f) %>%
tibble::as_tibble() %>%
dplyr::rename(
MO = "nodeB",
met = "nodeA",
val = "weight"
) %>%
dplyr::select(dplyr::all_of(c("MO", "met", "val")))
# Extract solution name
name <- stringr::str_split(f, "/")[[1]][3] %>% stringr::str_remove(".csv")
# Assign solution to list
msR[[name]] <- tb
}
list.files("dev/dev_data/misosoupr_data", full.names = TRUE)
list.files("dev/dev_data/misosoupr_data/", full.names = TRUE)
# Initialise list
msR <- list()
# Read all solutions and save to list
for (f in list.files("dev/dev_data/misosoupr_data/", full.names = TRUE)) {
tb <- read.csv(file = f) %>%
tibble::as_tibble() %>%
dplyr::rename(
MO = "nodeB",
met = "nodeA",
val = "weight"
) %>%
dplyr::select(dplyr::all_of(c("MO", "met", "val")))
# Extract solution name
name <- stringr::str_split(f, "/")[[1]][3] %>% stringr::str_remove(".csv")
# Assign solution to list
msR[[name]] <- tb
}
list.files("dev/dev_data/misosoupr_data/", full.names = TRUE)
list.files("dev/dev_data/misosoupr_data/", full.names = TRUE)
# Initialise list
msR <- list()
getwd()
# Read all solutions and save to list
for (f in list.files("dev/dev_data/misosoupr_data/", full.names = TRUE)) {
tb <- read.csv(file = f) %>%
tibble::as_tibble() %>%
dplyr::rename(
MO = "nodeB",
met = "nodeA",
val = "weight"
) %>%
dplyr::select(dplyr::all_of(c("MO", "met", "val")))
# Extract solution name
name <- stringr::str_split(f, "/")[[1]][3] %>% stringr::str_remove(".csv")
# Assign solution to list
msR[[name]] <- tb
}
devtools::load_all(".")
# Initialise list
msR <- list()
getwd()
# Read all solutions and save to list
for (f in list.files("extdata/misosoupR", full.names = TRUE)) {
tb <- read.csv(file = f) %>%
tibble::as_tibble() %>%
dplyr::rename(
MO = "nodeB",
met = "nodeA",
val = "weight"
) %>%
dplyr::select(dplyr::all_of(c("MO", "met", "val")))
# Extract solution name
name <- stringr::str_split(f, "/")[[1]][3] %>% stringr::str_remove(".csv")
# Assign solution to list
msR[[name]] <- tb
}
# Initialise list
msR <- list()
getwd()
# Read all solutions and save to list
for (f in list.files("inst/extdata/misosoupR", full.names = TRUE)) {
tb <- read.csv(file = f) %>%
tibble::as_tibble() %>%
dplyr::rename(
MO = "nodeB",
met = "nodeA",
val = "weight"
) %>%
dplyr::select(dplyr::all_of(c("MO", "met", "val")))
# Extract solution name
name <- stringr::str_split(f, "/")[[1]][3] %>% stringr::str_remove(".csv")
# Assign solution to list
msR[[name]] <- tb
}
# Initialise list
msR <- list()
getwd()
# Read all solutions and save to list
for (f in list.files("inst/extdata/misosoupR/", full.names = TRUE)) {
tb <- read.csv(file = f) %>%
tibble::as_tibble() %>%
dplyr::rename(
MO = "nodeB",
met = "nodeA",
val = "weight"
) %>%
dplyr::select(dplyr::all_of(c("MO", "met", "val")))
# Extract solution name
name <- stringr::str_split(f, "/")[[1]][3] %>% stringr::str_remove(".csv")
# Assign solution to list
msR[[name]] <- tb
}
# Initialise list
msR <- list()
getwd()
# Read all solutions and save to list
for (f in list.files("../inst/extdata/misosoupR/", full.names = TRUE)) {
tb <- read.csv(file = f) %>%
tibble::as_tibble() %>%
dplyr::rename(
MO = "nodeB",
met = "nodeA",
val = "weight"
) %>%
dplyr::select(dplyr::all_of(c("MO", "met", "val")))
# Extract solution name
name <- stringr::str_split(f, "/")[[1]][3] %>% stringr::str_remove(".csv")
# Assign solution to list
msR[[name]] <- tb
}
usethis::use_import_from("magrittr", "%>%")
devtools::load_all(".")
# Initialise list
msR <- list()
getwd()
# Read all solutions and save to list
for (f in list.files("../inst/extdata/misosoupR/", full.names = TRUE)) {
tb <- read.csv(file = f) %>%
tibble::as_tibble() %>%
dplyr::rename(
MO = "nodeB",
met = "nodeA",
val = "weight"
) %>%
dplyr::select(dplyr::all_of(c("MO", "met", "val")))
# Extract solution name
name <- stringr::str_split(f, "/")[[1]][3] %>% stringr::str_remove(".csv")
# Assign solution to list
msR[[name]] <- tb
}
View(msR)
# Initialise list
msR <- list()
getwd()
# Read all solutions and save to list
for (f in list.files("../inst/extdata/misosoupR/", full.names = TRUE)) {
tb <- read.csv(file = f) %>%
tibble::as_tibble() %>%
dplyr::rename(
MO = "nodeB",
met = "nodeA",
val = "weight"
) %>%
dplyr::select(dplyr::all_of(c("MO", "met", "val")))
# Extract solution name
name <- stringr::str_split(f, "/")[[1]][4] %>% stringr::str_remove(".csv")
# Assign solution to list
msR[[name]] <- tb
}
View(msR)
# Initialise list
msR <- list()
getwd()
# Read all solutions and save to list
for (f in list.files("../inst/extdata/misosoupR/", full.names = TRUE)) {
tb <- read.csv(file = f) %>%
tibble::as_tibble() %>%
dplyr::rename(
MO = "nodeB",
met = "nodeA",
val = "weight"
) %>%
dplyr::select(dplyr::all_of(c("MO", "met", "val")))
# Extract solution name
name <- stringr::str_split(f, "/")[[1]][5] %>% stringr::str_remove(".csv")
# Assign solution to list
msR[[name]] <- tb
}
# Initialise list
msR <- list()
# Read all solutions and save to list
for (f in list.files("../inst/extdata/misosoupR/", full.names = TRUE)) {
tb <- read.csv(file = f) %>%
tibble::as_tibble() %>%
dplyr::rename(
MO = "nodeB",
met = "nodeA",
val = "weight"
) %>%
dplyr::select(dplyr::all_of(c("MO", "met", "val")))
# Extract solution name
name <- stringr::str_split(f, "/")[[1]][5] %>% stringr::str_remove(".csv")
# Assign solution to list
msR[[name]] <- tb
}
grid.expand(data.frame(a = a:f))
msR_alignments <- list()
done <- c()
for (c1 in names(msR)) {
for (c2 in names(msR)) {
if (c1 == c2 | c2 %in% done) next
alignment_name <- paste0(c1, "-", c2)
alignment_list <- list()
alignment_list[[c1]] <- msR[[c1]]
alignment_list[[c2]] <- msR[[c2]]
# print(c1)
# print(alignment_list)
# print(names(alignment_list))
# break
msR_alignments[[alignment_name]] <- MiCo.align(alignment_list)
}
done <- c(done, c1)
}
msR_alignments <- list()
done <- c()
for (c1 in names(msR)) {
for (c2 in names(msR)) {
if (c1 == c2 | c2 %in% done) next
alignment_name <- paste0(c1, "-", c2)
alignment_list <- list()
alignment_list[[c1]] <- msR[[c1]]
alignment_list[[c2]] <- msR[[c2]]
# print(c1)
# print(alignment_list)
# print(names(alignment_list))
# break
msR_alignments[[alignment_name]] <- MiCo.align(alignment_list)
}
done <- c(done, c1)
}
msR_alignments <- list()
done <- c()
for (c1 in names(msR)) {
for (c2 in names(msR)) {
if (c1 == c2 | c2 %in% done) next
alignment_name <- paste0(c1, "-", c2)
alignment_list <- list()
alignment_list[[c1]] <- msR[[c1]]
alignment_list[[c2]] <- msR[[c2]]
# print(c1)
# print(alignment_list)
# print(names(alignment_list))
# break
msR_alignments[[alignment_name]] <- MiCo.align(alignment_list)
}
done <- c(done, c1)
print(done)
}
names(msR)
# Initialise list
msR <- list()
# Read all solutions and save to list
for (f in list.files("../inst/extdata/misosoupR/", full.names = TRUE)) {
tb <- read.csv(file = f) %>%
tibble::as_tibble() %>%
dplyr::rename(
MO = "nodeB",
met = "nodeA",
val = "weight"
) %>%
dplyr::select(dplyr::all_of(c("MO", "met", "val")))
# Extract solution name
name <- stringr::str_split(f, "/")[[1]][5] %>% stringr::str_remove(".csv")
print(name)
# Assign solution to list
msR[[name]] <- tb
}
# Initialise list
msR <- list()
# Read all solutions and save to list
for (f in list.files("../inst/extdata/misosoupR/", full.names = TRUE)) {
tb <- read.csv(file = f) %>%
tibble::as_tibble() %>%
dplyr::rename(
MO = "nodeB",
met = "nodeA",
val = "weight"
) %>%
dplyr::select(dplyr::all_of(c("MO", "met", "val")))
# Extract solution name
print(f)
name <- stringr::str_split(f, "/")[[1]][5] %>% stringr::str_remove(".csv")
# Assign solution to list
msR[[name]] <- tb
}
# Initialise list
msR <- list()
# Read all solutions and save to list
for (f in list.files("../inst/extdata/misosoupR", full.names = TRUE)) {
tb <- read.csv(file = f) %>%
tibble::as_tibble() %>%
dplyr::rename(
MO = "nodeB",
met = "nodeA",
val = "weight"
) %>%
dplyr::select(dplyr::all_of(c("MO", "met", "val")))
# Extract solution name
print(f)
name <- stringr::str_split(f, "/")[[1]][6] %>% stringr::str_remove(".csv")
print(name)
# Assign solution to list
msR[[name]] <- tb
}
# Initialise list
msR <- list()
# Read all solutions and save to list
for (f in list.files("../inst/extdata/misosoupR", full.names = TRUE)) {
tb <- read.csv(file = f) %>%
tibble::as_tibble() %>%
dplyr::rename(
MO = "nodeB",
met = "nodeA",
val = "weight"
) %>%
dplyr::select(dplyr::all_of(c("MO", "met", "val")))
# Extract solution name
print(f)
name <- stringr::str_split(f, "/")[[1]][7] %>% stringr::str_remove(".csv")
print(name)
# Assign solution to list
msR[[name]] <- tb
}
# Initialise list
msR <- list()
# Read all solutions and save to list
for (f in list.files("../inst/extdata/misosoupR", full.names = TRUE)) {
tb <- read.csv(file = f) %>%
tibble::as_tibble() %>%
dplyr::rename(
MO = "nodeB",
met = "nodeA",
val = "weight"
) %>%
dplyr::select(dplyr::all_of(c("MO", "met", "val")))
# Extract solution name
print(f)
name <- stringr::str_split(f, "/")[[1]][5] %>% stringr::str_remove(".csv")
print(name)
# Assign solution to list
msR[[name]] <- tb
}
# Initialise list
msR <- list()
# Read all solutions and save to list
for (f in list.files("../inst/extdata/misosoupR", full.names = TRUE)) {
tb <- read.csv(file = f) %>%
tibble::as_tibble() %>%
dplyr::rename(
MO = "nodeB",
met = "nodeA",
val = "weight"
) %>%
dplyr::select(dplyr::all_of(c("MO", "met", "val")))
# Extract solution name
name <- stringr::str_split(f, "/")[[1]][5] %>% stringr::str_remove(".csv")
# Assign solution to list
msR[[name]] <- tb
}
msR_alignments <- list()
done <- c()
for (c1 in names(msR)) {
for (c2 in names(msR)) {
if (c1 == c2 | c2 %in% done) next
alignment_name <- paste0(c1, "-", c2)
alignment_list <- list()
alignment_list[[c1]] <- msR[[c1]]
alignment_list[[c2]] <- msR[[c2]]
# print(c1)
# print(alignment_list)
# print(names(alignment_list))
# break
msR_alignments[[alignment_name]] <- MiCo.align(alignment_list)
}
done <- c(done, c1)
print(done)
}
msR_alignments <- list()
done <- c()
for (c1 in names(msR)) {
for (c2 in names(msR)) {
if (c1 == c2 | c2 %in% done) next
alignment_name <- paste0(c1, "-", c2)
alignment_list <- list()
alignment_list[[c1]] <- msR[[c1]]
alignment_list[[c2]] <- msR[[c2]]
# print(c1)
# print(alignment_list)
# print(names(alignment_list))
# break
msR_alignments[[alignment_name]] <- MiCo.align(alignment_list)
}
done <- c(done, c1)
cat("Alignment:", round(done/length(msR)*100, 2), "%     \r")
}
msR_alignments <- list()
done <- c()
for (c1 in names(msR)) {
for (c2 in names(msR)) {
if (c1 == c2 | c2 %in% done) next
alignment_name <- paste0(c1, "-", c2)
alignment_list <- list()
alignment_list[[c1]] <- msR[[c1]]
alignment_list[[c2]] <- msR[[c2]]
# print(c1)
# print(alignment_list)
# print(names(alignment_list))
# break
msR_alignments[[alignment_name]] <- MiCo.align(alignment_list)
}
done <- c(done, c1)
cat("Alignment:", round(length(done)/length(msR)*100, 2), "%     \r")
}
View(msR_alignments)
msR_alignments[["ac_A1R12_1-ac_A1R12_10"]][["flux_prod_j_eff"]][["ac_A1R12_10"]]
View(msR)
msR$ac_A1R12_1
msR$ac_A1R12_1 %>% print(n = 59)
View(msR[["ac_A1R12_1"]])
msR_alignments[["ac_A1R12_10-cit_A1R12_19"]][["bin_mat"]]
msR_alignments[["ac_A1R12_10-cit_A1R12_19"]][["js_mat"]]
msR_alignments[["ac_A1R12_21-f6p_B3M02_1"]][["alignment"]]
msR_alignments[["ac_A1R12_21-f6p_B3M02_1"]][["js_mat"]]
msR_alignments[["ac_A1R12_1-ac_A1R12_19"]][["js_mat"]]
msR_alignments[["ac_A1R12_1-ac_A1R12_19"]][["js_mat"]] %>% sum(is.na())
msR_alignments[["ac_A1R12_1-ac_A1R12_19"]][["js_mat"]] %>% sum(is.na(.))
msR_alignments[["ac_A1R12_1-ac_A1R12_19"]][["js_mat"]] %>% sum(!is.na(.))
msR_alignments[["ac_A1R12_1-ac_A1R12_19"]][["js_mat"]] %>% sum(.)
msR_alignments[["ac_A1R12_1-ac_A1R12_19"]][["js_mat"]] %>% sum(., na.rm = T)
msR_alignments[["ac_A1R12_1-ac_A1R12_19"]][["js_mat"]] %>% sum(!is.na(.), na.rm = T)
msR_alignments[["ac_A1R12_1-ac_A1R12_19"]][["js_mat"]] %>% sum(is.na(.), na.rm = T)
msR_alignments[["ac_A1R12_1-ac_A1R12_19"]][["js_mat"]] %>% sum(!is.na(.), na.rm = T)
msR_alignments[["ac_A1R12_1-ac_A1R12_19"]][["js_mat"]] %>% sum(is.na(.))
msR_alignments[["ac_A1R12_1-ac_A1R12_19"]][["js_mat"]] %>% is.na()
msR_alignments[["ac_A1R12_1-ac_A1R12_19"]][["js_mat"]] %>% is.na() %>% sum()
msR_alignments[["ac_A1R12_1-ac_A1R12_19"]][["js_mat"]] %>% !is.na() %>% sum()
msR_alignments[["ac_A1R12_1-ac_A1R12_19"]][["js_mat"]] %>% !is.na(.) %>% sum()
msR_alignments[["ac_A1R12_1-ac_A1R12_19"]][["js_mat"]] %>% is.na() %>% sum()
msR_alignments[["ac_A1R12_1-ac_A1R12_19"]][["js_mat"]] %>% sum(is.na())
msR_alignments[["ac_A1R12_1-ac_A1R12_19"]][["js_mat"]] %>% sum(is.na(.))
msR_alignments[["ac_A1R12_1-ac_A1R12_19"]][["js_mat"]] %>% is.na() %>% sum()
View(msR_alignments)
tibble::as_tibble(msR_alignments)
