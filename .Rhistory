simplified()
colors <- rev(c("darkred", "red", "orange", "pink"))
igraph::E(g)$color <- colors[igraph::E(g)$weight]
igraph::E(g)$alpha <- 1
plot(
g,
layout = igraph::layout_with_fr(g),
# edge.width = igraph::E(g)$width,
# edge.color = igraph::E(g)$color,
edge.curved = 0.5,
vertex.label.color = "black",
vertex.color = "lightblue",
main = "Graph with Custom Edge Widths and Colors")
plot(
g,
layout = igraph::layout_with_fr(g),
# edge.width = igraph::E(g)$width,
# edge.color = igraph::E(g)$color,
edge.curved = 0.5,
vertex.label.color = "black",
vertex.color = "lightblue",
main = "Graph with Custom Edge Widths and Colors")
g <- igraph::graph_from_adjacency_matrix(
a@alignment$levels_mat,
mode = "directed",
weighted = TRUE)
rel <- (igraph::E(g)$weight / max(igraph::E(g)$weight))
igraph::E(g)$width <- rel
igraph::E(g)$arrow.size <- rel
g <- igraph::graph_from_adjacency_matrix(
a@alignment$levels_mat,
mode = "directed",
weighted = TRUE)
rel <- (igraph::E(g)$weight / max(igraph::E(g)$weight))
igraph::E(g)$width
igraph::E(g)$arrow.size
igraph::E(g)$width <- rel
igraph::E(g)$width
unique(rel)
unique(rel) %>% length()
unique(rel) %>% sort()
igraph::E(g)$width <- rel * 4
igraph::E(g)$arrow.size <- rel
adjustcolor(rel, rel)
plot(
g,
# layout = igraph::layout_with_fr(g),
layout = igraph::layout_with_kk(g),
# edge.width = igraph::E(g)$width,
edge.color = igraph::E(g)$color,
edge.curved = 0.5,
vertex.label.color = "black",
vertex.color = "lightblue",
main = "Graph with Custom Edge Widths and Colors")
plot(
g,
# layout = igraph::layout_with_fr(g),
layout = igraph::layout_on_grid(g),
# edge.width = igraph::E(g)$width,
edge.color = igraph::E(g)$color,
edge.curved = 0.5,
vertex.label.color = "black",
vertex.color = "lightblue",
main = "Graph with Custom Edge Widths and Colors")
plot(
g,
# layout = igraph::layout_with_fr(g),
layout = igraph::layout_on_sphere(g),
# edge.width = igraph::E(g)$width,
edge.color = igraph::E(g)$color,
edge.curved = 0.5,
vertex.label.color = "black",
vertex.color = "lightblue",
main = "Graph with Custom Edge Widths and Colors")
igraph::E(g)$color
plot(
g,
# layout = igraph::layout_with_fr(g),
layout = igraph::layout_on_sphere(g),
# edge.width = igraph::E(g)$width,
# edge.color = igraph::E(g)$color,
edge.color = adjustcolor("black", alpha.f = rel),
edge.curved = 0.5,
vertex.label.color = "black",
vertex.color = "lightblue",
main = "Graph with Custom Edge Widths and Colors")
plot(
g,
# layout = igraph::layout_with_fr(g),
layout = igraph::layout_on_sphere(g),
# edge.width = igraph::E(g)$width,
# edge.color = igraph::E(g)$color,
edge.color = adjustcolor("black", alpha = rel),
edge.curved = 0.5,
vertex.label.color = "black",
vertex.color = "lightblue",
main = "Graph with Custom Edge Widths and Colors")
plot(
g,
# layout = igraph::layout_with_fr(g),
layout = igraph::layout_on_sphere(g),
# edge.width = igraph::E(g)$width,
# edge.color = igraph::E(g)$color,
edge.color = adjustcolor("black", alpha = igraph::E(g)$arrow.size),
edge.curved = 0.5,
vertex.label.color = "black",
vertex.color = "lightblue",
main = "Graph with Custom Edge Widths and Colors")
ep("black", length(rel))
rep("black", length(rel))
adjustcolor(rep("black", length(rel)), 0.5)
adjustcolor(rep("black", length(rel)), rel)
rep("black", length(rel))
rel
adjustcolor(rep("black", length(rel)), rel)
adjustcolor(rep("black", length(rel)), igraph::E(g)$width <- rel * 4)
rel
igraph::E(g)$weight
g <- igraph::graph_from_adjacency_matrix(
a@alignment$levels_mat,
mode = "directed",
weighted = TRUE)
rel <- (igraph::E(g)$weight / max(igraph::E(g)$weight))
igraph::E(g)$width <- rel * 4
igraph::E(g)$arrow.size <- 0
plot(
g,
# layout = igraph::layout_with_fr(g),
layout = igraph::layout_on_sphere(g),
# edge.width = igraph::E(g)$width,
# edge.color = igraph::E(g)$color,
edge.color = adjustcolor(rep("black", length(rel)), rel),
edge.curved = 0.5,
vertex.label.color = "black",
vertex.color = "lightblue",
main = "Graph with Custom Edge Widths and Colors")
plot(
g,
# layout = igraph::layout_with_fr(g),
layout = igraph::layout_on_sphere(g),
# edge.width = igraph::E(g)$width,
# edge.color = igraph::E(g)$color,
# edge.color = adjustcolor(rep("black", length(rel)), rel),
edge.curved = 0.5,
vertex.label.color = "black",
vertex.color = "lightblue",
main = "Graph with Custom Edge Widths and Colors")
devtools::load_all(".")
plotAlignment(a)
devtools::load_all(".")
plotAlignment(a)
devtools::load_all(".")
plotAlignment(a)
devtools::load_all(".")
plotAlignment(a)
devtools::load_all(".")
plotAlignment(a)
plotAlignment(a, 0.5)
plotAlignment(a, 0.1)
devtools::load_all(".")
plotAlignment(a, 0.5)
devtools::load_all(".")
plotAlignment(a, 0.5)
devtools::load_all(".")
plotAlignment(a, 0.5)
devtools::load_all(".")
plotAlignment(a, 0.5)
devtools::load_all(".")
plotAlignment(a, 0.5)
devtools::load_all(".")
plotAlignment(a, 0.5)
tm <- a@alignment$levels_mat
tm
tm %>% as.vector()
tm %>% as.vector() %>% unique()
length(a@communities)
tm[tm > 26]
tm
tm > 26
tm[tm > 26]
matrix(0:8)
matrix(0:8, ncol = 3)
matrix(0:8, ncol = 3) %>%
graph_from_adj_matrix()
matrix(0:8, ncol = 3) %>%
graph_from_adjacency_matrix()
matrix(0:8, ncol = 3) %>%
graph_from_adjacency_matrix(
mode = "directed",
weighted = TRUE)
tm[tm < 26] <- 0
tm
a@communities
devtools::load_all(".")
plotAlignment(a, 0.5)
plotAlignment(a, 0)
devtools::load_all(".")
plotAlignment(a, 0)
plotAlignment(a, 0.5)
devtools::load_all(".")
a@alignment$levels_mat %>%
tibble::as_tibble(rownames = "RowName") %>%
tidyr::pivot_longer(
cols = -"RowName",
names_to = "ColName",
values_to = "level") %>%
dplyr::rename(
met = "RowName",
met2 = "ColName") %>%
# dplyr::filter(level == 4) %>%
ggplot2::ggplot(ggplot2::aes(x = met, y = met2, fill = level)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_gradient(low = "white", high = "red") +
ggplot2::theme_minimal() +
ggplot2::theme(
axis.text.x = ggplot2::element_text(angle = 90, hjust = 1),
axis.title = ggplot2::element_blank())
a@alignment$levels_mat %>%
tibble::as_tibble(rownames = "RowName") %>%
tidyr::pivot_longer(
cols = -"RowName",
names_to = "ColName",
values_to = "level") %>%
dplyr::rename(
met = "RowName",
met2 = "ColName") %>%
dplyr::filter(level > 26) %>%
ggplot2::ggplot(ggplot2::aes(x = met, y = met2, fill = level)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_gradient(low = "white", high = "red") +
ggplot2::theme_minimal() +
ggplot2::theme(
axis.text.x = ggplot2::element_text(angle = 90, hjust = 1),
axis.title = ggplot2::element_blank())
a@alignment$levels_mat %>%
tibble::as_tibble(rownames = "RowName") %>%
tidyr::pivot_longer(
cols = -"RowName",
names_to = "ColName",
values_to = "level") %>%
dplyr::rename(
met = "RowName",
met2 = "ColName") %>%
dplyr::filter(level > 2) %>%
ggplot2::ggplot(ggplot2::aes(x = met, y = met2, fill = level)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_gradient(low = "white", high = "red") +
ggplot2::theme_minimal() +
ggplot2::theme(
axis.text.x = ggplot2::element_text(angle = 90, hjust = 1),
axis.title = ggplot2::element_blank())
a@alignment$levels_mat %>%
tibble::as_tibble(rownames = "RowName") %>%
tidyr::pivot_longer(
cols = -"RowName",
names_to = "ColName",
values_to = "level") %>%
dplyr::rename(
met = "RowName",
met2 = "ColName") %>%
dplyr::filter(level > 5) %>%
ggplot2::ggplot(ggplot2::aes(x = met, y = met2, fill = level)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_gradient(low = "white", high = "red") +
ggplot2::theme_minimal() +
ggplot2::theme(
axis.text.x = ggplot2::element_text(angle = 90, hjust = 1),
axis.title = ggplot2::element_blank())
a@alignment$levels_mat %>%
tibble::as_tibble(rownames = "RowName") %>%
tidyr::pivot_longer(
cols = -"RowName",
names_to = "ColName",
values_to = "level") %>%
dplyr::rename(
met = "RowName",
met2 = "ColName") %>%
dplyr::filter(level > 5) %>%
ggplot2::ggplot(ggplot2::aes(x = met, y = met2, fill = level)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_gradient(low = "white", high = "red") +
ggplot2::theme_minimal() +
ggplot2::theme(
axis.text.x = ggplot2::element_text(angle = 90, hjust = 1),
axis.title = ggplot2::element_blank(),
grid = ggplot2::element_blank()
a@alignment$levels_mat %>%
a@alignment$levels_mat %>%
tibble::as_tibble(rownames = "RowName") %>%
tidyr::pivot_longer(
cols = -"RowName",
names_to = "ColName",
values_to = "level") %>%
dplyr::rename(
met = "RowName",
met2 = "ColName") %>%
dplyr::filter(level > 5) %>%
ggplot2::ggplot(ggplot2::aes(x = met, y = met2, fill = level)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_gradient(low = "white", high = "red") +
ggplot2::theme_minimal() +
ggplot2::theme(
axis.text.x = ggplot2::element_text(angle = 90, hjust = 1),
axis.title = ggplot2::element_blank(),
grid = ggplot2::element_blank())
a@alignment$levels_mat %>%
tibble::as_tibble(rownames = "RowName") %>%
tidyr::pivot_longer(
cols = -"RowName",
names_to = "ColName",
values_to = "level") %>%
dplyr::rename(
met = "RowName",
met2 = "ColName") %>%
dplyr::filter(level > 5) %>%
ggplot2::ggplot(ggplot2::aes(x = met, y = met2, fill = level)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_gradient(low = "white", high = "red") +
ggplot2::theme_minimal() +
ggplot2::theme(
axis.text.x = ggplot2::element_text(angle = 90, hjust = 1),
axis.title = ggplot2::element_blank(),
panel.background = ggplot2::element_rect(fill = "white", color = NA))
a@alignment$levels_mat %>%
tibble::as_tibble(rownames = "RowName") %>%
tidyr::pivot_longer(
cols = -"RowName",
names_to = "ColName",
values_to = "level") %>%
dplyr::rename(
met = "RowName",
met2 = "ColName") %>%
dplyr::filter(level > 5) %>%
ggplot2::ggplot(ggplot2::aes(x = met, y = met2, fill = level)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_gradient(low = "white", high = "red") +
ggplot2::theme_minimal() +
ggplot2::theme(
axis.text.x = ggplot2::element_text(angle = 90, hjust = 1),
axis.title = ggplot2::element_blank(),
panel.grid = ggplot2::element_blank()
# panel.background = ggplot2::element_rect(fill = "white", color = NA)
)
devtools::load_all(".")
plotAlignment(a)
plotAlignment(a, 0.5)
plotAlignment(a, 0)
plotAlignment(a, 0.9)
plotAlignment(a, 0.8)
devtools::load_all(".")
plotAlignment(a, 0.8)
devtools::load_all(".")
plotAlignment(a, 0.8)
msl
msl <- misosoup
devtools::load_all(".")
devtools::document()
devtools::document()
plotAlignment(a, 0.8)
plotAlignment(a, 0.8)
devtools::load_all(".")
plotAlignment(a, 0.8)
devtools::load_all(".")
plotAlignment(a, 0.8)
usethis::edit_file("R/method-alignmentHeatmap.R")
devtools::load_all(".")
devtools::document()
devtools::document()
devtools::document()
# Align the MiCo objects by creating a MiCoAl object
alignment <- MiCoAl(mc1, mc2, mc3, mc4)
# Inspect the alignment
alignment
alignmentHeatmap(alignment)
alignmentHeatmap(alignment, 0.8)
alignmentNetwork(alignment, 0.8)
alignmentHeatmap(alignment, 0.8)
# Align the MiCo objects by creating a MiCoAl object
alignment <- MiCoAl(mc1, mc2, mc3, mc4)
# Inspect the alignment
alignment
alignmentNetwork(alignment, 0.8)
alignmentHeatmap(alignment, 0.8)
alignmentHeatmap(alignment, 0.8)
devtools::load_all(".")
alignmentNetwork(alignment, 0.8)
alignmentHeatmap(alignment, 0.8)
# Inspect the data
ac_A1R12_1
cit_A1R12_1
# Create MiCo objects
mc1 <- MiCo(ac_A1R12_1)
### Could delete all but three bc they're doubled with the list
ac_A1R12_1 <-
read.csv("inst/extdata/misosoup/ac_A1R12_1.csv") %>%
tibble::as_tibble()
usethis::use_data(ac_A1R12_1, overwrite = TRUE)
ac_A1R12_2 <-
read.csv("inst/extdata/misosoup/ac_A1R12_2.csv") %>%
tibble::as_tibble()
usethis::use_data(ac_A1R12_2, overwrite = TRUE)
cit_A1R12_1 <-
read.csv("inst/extdata/misosoup/cit_A1R12_1.csv") %>%
tibble::as_tibble()
usethis::use_data(cit_A1R12_1, overwrite = TRUE)
cit_A1R12_2 <-
read.csv("inst/extdata/misosoup/cit_A1R12_2.csv") %>%
tibble::as_tibble()
usethis::use_data(cit_A1R12_2, overwrite = TRUE)
ac_A3R04_1 <-
read.csv("inst/extdata/misosoup/ac_A3R04_1.csv") %>%
tibble::as_tibble()
usethis::use_data(ac_A3R04_1, overwrite = TRUE)
# Inspect the data
ac_A1R12_1
cit_A1R12_1
# Create MiCo objects
mc1 <- MiCo(ac_A1R12_1)
mc2 <- MiCo(cit_A1R12_1)
mc3 <- MiCo(ac_A1R12_2)
mc4 <- MiCo(cit_A1R12_2)
# Inspect MiCo Objects
mc1
mc1
# Align the MiCo objects by creating a MiCoAl object
alignment <- MiCoAl(mc1, mc2, mc3, mc4)
# Inspect the alignment
alignment
alignmentNetwork(alignment, 0.8)
alignmentHeatmap(alignment, 0.8)
alignmentNetwork(alignment, 0.8)
alignmentHeatmap(alignment, 0.2)
devtools::load_all(".")
alignmentNetwork(alignment, 0.8)
alignmentHeatmap(alignment, 0.2)
devtools::load_all(".")
alignmentNetwork(alignment, 0.8)
alignmentHeatmap(alignment, 0.2)
alignmentNetwork(alig)
alignmentNetwork(alig, 0.8)
fs::file_size("data/")
devtools::load_all(".")
alignmentHeatmap(alignment, 0.2)
devtools::load_all(".")
??dplyr::filter
devtools::load_all(".")
# alignmentNetwork(alignment, 0.8)
alignmentHeatmap(alignment, 0.2)
devtools::load_all(".")
# alignmentNetwork(alignment, 0.8)
alignmentHeatmap(alignment, 0.2)
### Could delete all but three bc they're doubled with the list
ac_A1R12_1 <-
read.csv("inst/extdata/misosoup/ac_A1R12_1.csv") %>%
tibble::as_tibble()
usethis::use_data(ac_A1R12_1, overwrite = TRUE)
ac_A1R12_2 <-
read.csv("inst/extdata/misosoup/ac_A1R12_2.csv") %>%
tibble::as_tibble()
usethis::use_data(ac_A1R12_2, overwrite = TRUE)
cit_A1R12_1 <-
read.csv("inst/extdata/misosoup/cit_A1R12_1.csv") %>%
tibble::as_tibble()
usethis::use_data(cit_A1R12_1, overwrite = TRUE)
cit_A1R12_2 <-
read.csv("inst/extdata/misosoup/cit_A1R12_2.csv") %>%
tibble::as_tibble()
usethis::use_data(cit_A1R12_2, overwrite = TRUE)
ac_A3R04_1 <-
read.csv("inst/extdata/misosoup/ac_A3R04_1.csv") %>%
tibble::as_tibble()
usethis::use_data(ac_A3R04_1, overwrite = TRUE)
misosoup <- list()
for (f in fs::dir_ls("inst/extdata/misosoup")) {
name <- f %>% fs::path_file() %>% fs::path_ext_remove()
tb <- read.csv(f) %>% tibble::as_tibble()
misosoup[[name]] <- MiCo(data = tb, name = name)
}
usethis::use_data(misosoup, overwrite = TRUE)
View(g)
misosoup <- list()
for (f in fs::dir_ls("inst/extdata/misosoup")) {
name <- f %>% fs::path_file() %>% fs::path_ext_remove()
tb <- read.csv(f) %>% tibble::as_tibble()
# misosoup[[name]] <- MiCo(data = tb, name = name)
misosoup[[name]] <- tb
}
usethis::use_data(misosoup, overwrite = TRUE)
alig <- MiCoAl(misosoup[[1]], misosoup[[2]])
alig <- MiCoAl(misosoup[1], misosoup[2])
misosoup[1]
misosoup[[1]]
c1 <- MiCo(misosoup[[1]])
c2 <- MiCo(misosoup[[2]])
alig <- MiCoAl(c1, c2)
alignmentNetwork(alig, 0.8)
alignmentNetwork(alig, 1)
sessionInfo()
library(fsmc)
library(fsmc)
devtools::load_all()
?pak::pak
install.packages("pak")
pak::pak("tidyverse")
pak::pak("igraph")
library(pak)
pak("devtools")
pak("rhinoverse")
pak("rhino")
library(devtools)
devtools::load_all()
devtools::load_all(".")
